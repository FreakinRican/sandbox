* complete cli processing
* establish commands
  * init
    * init /path/to/workspace
  * list?
    * list ruby
    * list rubygems
  * config
    * config source.ruby add
    * config source.ruby remove
    * config source.ruby default
    * config source.rubygems add
    * config source.rubygems remove
    * config source.rubygems default
    * config default.install rubygems
    * config default.ruby
    * config default.rubygems
  * cache
    * cache purge
    * cache list
* setup global config
  * ruby version and location
  * rubygems version and location
  * install type (rubygems only or both)
  * cache location
* setup user config
  * ruby version and location
  * rubygems version and location
  * install type (rubygems only or both)
  * cache location
* build procedures ( can I create entire structure in tmp and build, moving when done? )
  * create workspace directory
      /path/to/workspace/
      /path/to/workspace/etc
      /path/to/workspace/bin
  * install ruby
    * build ruby ( possibly need to change build values ( like bleak house? ) )
      * locate ruby source code
        * IF check cache for extracted ruby in cache-extract
            make clean
        * ELSE IF check cache for ruby tarball and extract to cache-extract
        * ELSE download ruby to cache and extract to cache-extract
      * configure
          ./configure --prefix /new/workspace/directory
      * build
          make
      * install
          make install
  * install rubygems
    * build with new ruby
      * locate rubygems source code
        * IF check cache for extracted rubygems in cache-extract
        * ELSE IF check cache for rubygems tarball and extract to cache-extract
        * ELSE download ruby to cachegems and extract to cache-extract
      * unset environment variables
      * install
          /path/to/new/ruby setup.rb
    * build with system ruby
      * locate rubygems source code
        * IF check cache for extracted rubygems in cache-extract
        * ELSE IF check cache for rubygems tarball and extract to cache-extract
        * ELSE download ruby to cachegems and extract to cache-extract
      * set environment variables
          export GEM_HOME=$WORKSPACE/rubygems
          export GEM_PATH=$GEM_HOME
          export RUBYLIB=$WORKSPACE/lib/rubyinstall/lib
      * backup user's .gemrc file
          cp ~/.gemrc /tmp/.gemrc.orig
      * install rubygems
          /path/to/system/ruby setup.rb --prefix=$WORKSPACE/lib/rubyinstall
      * restore .gemrc file
          cp /tmp/.gemrc.orig ~/.gemrc
      * maybe symlink the binary?
          ln -s $WORKSPACE/lib/rubyinstall/bin $WORKSPACE/bin
  * install needed activation script
    * install gem wrapper? (need to backup)
        # need to create
        # could be useful to make sure env is set
        # but ultimately an issue since there is no way for subsequent commands installed via gems?
        cat $WORKSPACE/bin/gem 
        $WORKSPACE/lib/rubyinstall/bin/gem --config-file $WORKSPACE/etc/gemrc $*
    * IF installed both ruby and rubygems
    * ELSE installed only rubygems
        export _ORIGINAL_HOME=$HOME
        export WORKSPACE=/path/to/new/workspace
        export HOME=$WORKSPACE
        export _OLD_GEM_HOME=$GEM_HOME
        export _OLD_GEM_PATH=$GEM_PATH
        export _OLD_RUBYLIB=$RUBYLIB
        export _OLD_PATH=$PATH
        export GEM_HOME=$WORKSPACE/rubygems
        export GEM_PATH=$GEM_HOME
        export RUBYLIB=$WORKSPACE/lib/rubyinstall/lib
        export PATH=$WORKSPACE/bin:$PATH



  directory cannot exist... maybe later (then check to be sure it isn't HOME)
  
  workspace init =>
     only for new directories
  
  download cache
     ~/.workspace/sources/ruby
         stored by version/patchlevel
     ~/.workspace/sources/rubygems
         stored by version
  
  global config
     hash of download urls for ruby and rubygems
     one is selected from each by default
     ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6-p287.tar.gz
     ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6-p287.tar.bz2
     
     # inspiration from deprec, rubygems, bleak_house
     
     DEPREC_TEMPLATES_BASE = File.join(File.dirname(__FILE__), 'templates')
     
     SRC_PACKAGES[:ruby] = {
       :filename => 'ruby-1.8.6-p287.tar.gz',
       :md5sum => "f6cd51001534ced5375339707a757556  ruby-1.8.6-p287.tar.gz",
       :dir => 'ruby-1.8.6-p287',
       :url => "ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6-p287.tar.gz",
       :unpack => "tar zxf ruby-1.8.6-p287.tar.gz;",
       :configure => %w(
       ./configure
       --with-readline-dir=/usr/local
       ;
       ).reject{|arg| arg.match '#'}.join(' '),
       :make => 'make;',
       :install => 'make install;'
     }
     SRC_PACKAGES[:rubygems] = {
       :filename => 'rubygems-1.3.1.tgz',
       :md5sum => "a04ee6f6897077c5b75f5fd1e134c5a9  rubygems-1.3.1.tgz",
       :dir => 'rubygems-1.3.1',
       :url => "http://rubyforge.org/frs/download.php/45905/rubygems-1.3.1.tgz",
       :unpack => "tar zxf rubygems-1.3.1.tgz;",
       :configure => "",
       :make => "",
       :install => 'ruby setup.rb;'
     }
  
  user config
     ~/.workspace/config
     additional download urls
     change install version choices
  
  get ruby / rubygems
     download from download url in config
     goes into download cache
  
  build ruby and rubygems
     built in /tmp/?
     ruby: --prefix new/workspace/directory
     rubygems: new/workspace/directory/bin/ruby setup.rb
     installed into new/workspace/directory
  
  build only rubygems
     need to set RUBYLIB and GEM_HOME
  
  activate / deactivate script
     2 versions
         a) for ruby/rubygems install (basically sets path)
         b) for rubygems only install (set RUBYLIB, GEM_HOME and PATH)
  
  bin files => (wrappers to ensure env?)
    ruby wrapper
    ri wrapper
    rdoc wrapper
    erb wrapper
    testrb wrapper
    gem wrapper
    
  
  COMMANDS:
    init /path/to/workspace
    list (versions)
    list ruby
    list rubygems
    config.source.ruby add
    config.source.ruby remove
    config.source.ruby default
    config.source.rubygems add
    config.source.rubygems remove
    config.source.rubygems default
    config default.install rubygems
    config default.ruby
    config default.rubygems
    cache
    cache directory
    cache purge
    cache list
  
==Examples: ???
  workspace init newworkspacename
  workspace ruby --remove -v 1.8.6 -p 86
  workspace ruby --add -v 1.8.6 --patchlevel 86 --url
  
  
  
  # if ruby is configured with prefix=/some/dir/
  # the command: DESTDIR=/tmp/other/dir make install
  # will install ruby in /tmp/other/dir/some/dir/[bin|lib/share]
  
  
  # for creating a rubygems-only workspace (with existing ruby)
  WORKSPACE=/path/to/new/workspace
  export GEM_HOME=$WORKSPACE/rubygems
  export GEM_PATH=$GEM_HOME
  export RUBYLIB=$WORKSPACE/lib/rubyinstall/lib
  cp ~/.gemrc /tmp/.gemrc.orig
  ruby setup.rb --prefix=$WORKSPACE/lib/rubyinstall
  cp /tmp/.gemrc ~/.gemrc.orig
  ln -s $GEM_HOME/bin $WORKSPACE/bin
  
  cat $WORKSPACE/bin/gem # need to create - could be useful to make sure env is set, but ultimately an issue since there is no way for subsequent commands installed via gems?
  $WORKSPACE/lib/rubyinstall/bin/gem --config-file $WORKSPACE/etc/gemrc $*
  
  # Not that important, since the ENV needs setting also
  cat $WORKSPACE/rubygems/gemrc # need to create
  ---
  gemhome: $WORKSPACE/rubygems
  gempath:
  - $WORKSPACE/rubygems
  
  # to activate the rubygems-only workspace
  WORKSPACE=/path/to/new/workspace
  export GEM_HOME=$WORKSPACE/rubygems
  export GEM_PATH=$GEM_HOME
  export RUBYLIB=$WORKSPACE/lib/rubyinstall/lib
  export PATH=$WORKSPACE/bin:$PATH
  
  
  
= inspiration

based on codeforpeople's rubyforge:
require 'enumerator'
require 'fileutils'
require 'yaml'
require 'open-uri'

require 'pp'

# File lib/rubyforge.rb, line 106
def scrape_project(project, criteria={})
  max = criteria[ 'max' ] ? criteria[ 'max' ] : nil
  min = criteria[ 'min' ] ? criteria[ 'min' ] : nil
  data = {
    project => Hash.new { |h,k| h[k] = {} },
  }
  html = URI.parse("http://rubyforge.org/projects/#{project}/index.html").read
  group_id = html[/(frs|tracker|mail)\/\?group_id=\d+/][/\d+/].to_i
  html = URI.parse("http://rubyforge.org/frs/?group_id=#{group_id}").read
  
  html.scan(/download.php[^"]+">[^<]+/).each do |s|
    next unless s =~ /(tar|gz|bz2|tgz|zip)$/
    if s =~ /download.php\/(\d+)\/(#{project}[^"]+)">([^<]+)/
      version = $3
      file = $2
      stamp = $1
      dl = "#{stamp}/#{file}"
      parts = version.split('.')
      parts.pop while [ 'tar','gz','bz2','tgz','zip' ].include? parts.last
      name = parts.join('.')
      if name =~ /^#{project}-(\d+)\.(\d+)\.(\d+)/
        major, minor, tiny = $1, $2, $3
        next if min and name < "#{project}-#{min}" 
        next if max and name > "#{project}-#{max}"
        # data[ project ][ name ] ||= Hash.new { |h,k| h[k] = {} }
        # data[ project ][ name ][ version ] = "http://rubyforge.org/frs/download.php/#{dl}"
        data[ project ][ "#{major}.#{minor}.#{tiny}" ] ||= Hash.new { |h,k| h[k] = {} }
        data[ project ][ "#{major}.#{minor}.#{tiny}" ][ stamp ] ||= Hash.new { |h,k| h[k] = {} }
        data[ project ][ "#{major}.#{minor}.#{tiny}" ][ stamp ][ name ] ||= Hash.new { |h,k| h[k] = {} }
        data[ project ][ "#{major}.#{minor}.#{tiny}" ][ stamp ][ name ][ version ] = "http://rubyforge.org/frs/download.php/#{dl}"
      end
    end
  end
  
  data[ project ].keys.sort.each do |key|
    out = { key => data[project][key].keys.sort }
    pp out
  end
  data
end



   _     _            _    _                          
  | |   | |          | |  | |                         
  | |__ | | ___  __ _| | __ |__   ___  _   _ ___  ___ 
  | '_ \| |/ _ \/ _` | |/ / '_ \ / _ \| | | / __|/ _ \
  | |_) | |  __/ (_| |   <| | | | (_) | |_| \__ \  __/
  |_.__/|_|\___|\__,_|_|\_\_| |_|\___/ \__,_|___/\___|
                                                      
  
  
  # from http://blog.evanweaver.com/files/doc/fauna/bleak_house/
  
  if RUBY_PLATFORM =~ /win32|windows/
    raise "Windows is not supported."
  end
   
  unless RUBY_VERSION == '1.8.6'
    raise "Wrong Ruby version, you're at '#{RUBY_VERSION}', need 1.8.6"
  end
   
  source_dir = File.expand_path(File.dirname(__FILE__)) + "/../ruby"
  tmp = "/tmp/"
   
  require 'fileutils'
  require 'rbconfig'
   
  def which(basename)
    # system('which') is not compatible across Linux and BSD
    ENV['PATH'].split(File::PATH_SEPARATOR).detect do |directory|
      path = File.join(directory, basename.to_s)
      path if File.exist? path
    end
  end
   
  if which('ruby-bleak-house') and
    `ruby-bleak-house -e "puts RUBY_PATCHLEVEL"`.to_i >= 902
    # OK
  else
    # Build
    Dir.chdir(tmp) do
      build_dir = "bleak_house"
      binary_dir = File.dirname(`which ruby`)
      
      FileUtils.rm_rf(build_dir) rescue nil
      if File.exist? build_dir
        raise "Could not delete previous build dir #{Dir.pwd}/#{build_dir}"
      end
      
      Dir.mkdir(build_dir)
    
      begin
        Dir.chdir(build_dir) do
    
          # Copy Ruby source
          bz2 = "ruby-1.8.6-p230.tar.bz2"
          FileUtils.copy "#{source_dir}/#{bz2}", bz2
    
          # Extract
          system("tar xjf #{bz2} > tar.log 2>&1")
          File.delete bz2
      
          Dir.chdir("ruby-1.8.6-p230") do
    
            # Patch, configure, and build
            ["valgrind", "configure", "gc"].each do |patch|
              system("patch -p0 < \'#{source_dir}/#{patch}.patch\' > ../#{patch}_patch.log 2>&1")
            end
   
            system("./configure --prefix=#{binary_dir[0..-5]} > ../configure.log 2>&1") # --with-static-linked-ext
            
            # Patch the makefile for arch/sitedir
            makefile = File.read('Makefile')
            %w{arch sitearch sitedir}.each do | key |
              makefile.gsub!(/#{key} = .*/, "#{key} = #{Config::CONFIG[key]}")
            end
            File.open('Makefile', 'w'){|f| f.puts(makefile)}
            
            # Patch the config.h for constants
            constants = {
              'RUBY_LIB' => 'rubylibdir', #define RUBY_LIB "/usr/lib/ruby/1.8"
              'RUBY_SITE_LIB' => 'sitedir', #define RUBY_SITE_LIB "/usr/lib/ruby/site_ruby"
              'RUBY_SITE_LIB2' => 'sitelibdir', #define RUBY_SITE_LIB2 "/usr/lib/ruby/site_ruby/1.8"
              'RUBY_PLATFORM' => 'arch', #define RUBY_PLATFORM "i686-linux"
              'RUBY_ARCHLIB' => 'topdir', #define RUBY_ARCHLIB "/usr/lib/ruby/1.8/i686-linux"
              'RUBY_SITE_ARCHLIB' => 'sitearchdir' #define RUBY_SITE_ARCHLIB "/usr/lib/ruby/site_ruby/1.8/i686-linux"
            }
            config_h = File.read('config.h')
            constants.each do | const, key |
              config_h.gsub!(/#define #{const} .*/, "#define #{const} \"#{Config::CONFIG[key]}\"")
            end
            File.open('config.h', 'w'){|f| f.puts(config_h)}
            
            system("make > ../make.log 2>&1")
    
            binary = "#{binary_dir}/ruby-bleak-house"
    
            # Install binary
            if File.exist? "ruby"
              # Avoid "Text file busy" error
              File.delete binary if File.exist? binary
              exec("cp ./ruby #{binary}; chmod 755 #{binary}")
            else
              raise "Binary did not build"
            end
          end
          
        end
      rescue Object => e
        raise "Please see the last modified log file in #{tmp}#{build_dir}, perhaps\nit will contain a clue.\n#{e.to_s}"
      end
      
      # Success
    end
    
  end